-- Tabela de configurações detalhadas do personagem no Anime Dimensions
local playerSettings = {
    movementSpeed = {enabled = true, value = 100, description = "Velocidade de movimento", min = 16, max = 200},
    jumpHeight = {enabled = true, value = 50, description = "Altura do pulo", min = 50, max = 200},
    gravity = {enabled = true, value = 196.2, description = "Gravidade", min = 0, max = 500},
    skillCooldown = {enabled = true, value = 0.1, description = "Cooldown das habilidades", min = 0, max = 10},
    dashCooldown = {enabled = true, value = 0.5, description = "Cooldown do Dash", min = 0, max = 10}
}

-- Função para aplicar as configurações no personagem
local function applyCharacterSettings(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Humanoid") then
        return
    end

    local humanoid = character:FindFirstChild("Humanoid")
    
    -- Alterar a velocidade de movimento
    if playerSettings.movementSpeed.enabled then
        humanoid.WalkSpeed = playerSettings.movementSpeed.value
    end
    
    -- Alterar a altura do pulo
    if playerSettings.jumpHeight.enabled then
        humanoid.JumpHeight = playerSettings.jumpHeight.value
    end

    -- Alterar a gravidade
    if playerSettings.gravity.enabled then
        game:GetService("Workspace").Gravity = playerSettings.gravity.value
    end

    -- Alterar o cooldown das habilidades
    local replicatedStorage = game:GetService("ReplicatedStorage")
    local skills = replicatedStorage:FindFirstChild("Skills")
    if skills and playerSettings.skillCooldown.enabled then
        for _, skill in pairs(skills:GetChildren()) do
            if skill:IsA("StringValue") then
                local cooldown = skill:FindFirstChild("Cooldown")
                if cooldown then
                    cooldown.Value = playerSettings.skillCooldown.value
                end
            end
        end
    end

    -- Alterar o cooldown do Dash
    local dashSkill = replicatedStorage:FindFirstChild("Dash") -- Supondo que o Dash seja armazenado assim
    if dashSkill and playerSettings.dashCooldown.enabled then
        local cooldown = dashSkill:FindFirstChild("Cooldown")
        if cooldown then
            cooldown.Value = playerSettings.dashCooldown.value
        end
    end
end

-- Função para alterar as configurações dinamicamente
local function updateSettings(setting, value)
    if playerSettings[setting] then
        playerSettings[setting].enabled = value
        print("Configuração alterada: " .. setting .. " = " .. tostring(value))
        
        -- Aplicar as novas configurações imediatamente
        local player = game.Players.LocalPlayer
        applyCharacterSettings(player)
    else
        warn("Configuração não válida!")
    end
end

-- Função para criar uma tabela de opções movível
local function createOptionsGUI(player)
    -- Criar a GUI principal
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 400, 0, 500)
    frame.Position = UDim2.new(0.5, -200, 0.5, -250)
    frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    frame.Parent = screenGui

    -- Habilitar movimentação da tabela
    local dragInput = Instance.new("TextButton")
    dragInput.Size = UDim2.new(1, 0, 0, 25)
    dragInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    dragInput.Text = "Arraste-me para mover"
    dragInput.Parent = frame

    local dragStartPos = nil
    local dragStartMouse = nil

    dragInput.MouseButton1Down:Connect(function(input)
        dragStartPos = frame.Position
        dragStartMouse = input.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragStartPos = nil
                dragStartMouse = nil
            end
        end)
    end)

    -- Função para mover a tabela com o mouse
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragStartPos then
            local delta = input.Position - dragStartMouse
            frame.Position = UDim2.new(dragStartPos.X.Scale, delta.X, dragStartPos.Y.Scale, delta.Y)
        end
    end)

    local uiListLayout = Instance.new("UIListLayout")
    uiListLayout.Parent = frame

    -- Criar botões dinâmicos para cada configuração
    for setting, config in pairs(playerSettings) do
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0, 350, 0, 30)
        button.Text = config.enabled and "Ativar " .. config.description or "Desativar " .. config.description
        button.BackgroundColor3 = config.enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        button.Parent = frame

        button.MouseButton1Click:Connect(function()
            -- Alternar o estado da configuração
            config.enabled = not config.enabled
            button.Text = config.enabled and "Ativar " .. config.description or "Desativar " .. config.description
            button.BackgroundColor3 = config.enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)

            -- Aplicar as novas configurações
            applyCharacterSettings(player)
        end)
    end
end

-- Função para aplicar as configurações iniciais ao jogador
local function initializeSettings(player)
    -- Aplicar configurações iniciais
    applyCharacterSettings(player)

    -- Criar a interface de opções
    createOptionsGUI(player)
end

-- Inicializar as configurações e a interface quando o jogador entra
local player = game.Players.LocalPlayer
initializeSettings(player)
