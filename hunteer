-- Tabela de configurações para alterar atributos do personagem no Anime Dimensions
local playerSettings = {
    movementSpeed = 100,   -- Velocidade de movimento (padrão 100)
    jumpHeight = 150,      -- Altura do pulo (padrão 150)
    gravity = 50,          -- Gravidade (padrão 50)
    skillCooldown = 0.1,   -- Cooldown das habilidades (padrão 0.1 segundos)
}

-- Função para aplicar as alterações no personagem
local function applyCharacterSettings(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Humanoid") then
        return
    end

    local humanoid = character:FindFirstChild("Humanoid")
    
    -- Alterar a velocidade de movimento
    humanoid.WalkSpeed = playerSettings.movementSpeed
    
    -- Alterar a altura do pulo
    humanoid.JumpHeight = playerSettings.jumpHeight

    -- Alterar a gravidade
    game:GetService("Workspace").Gravity = playerSettings.gravity

    -- Alterar o cooldown das skills
    -- Aqui assumimos que há uma tabela ou métodos para habilidades que precisam ser ajustados
    local replicatedStorage = game:GetService("ReplicatedStorage")
    local skills = replicatedStorage:FindFirstChild("Skills")
    if skills then
        for _, skill in pairs(skills:GetChildren()) do
            if skill:IsA("StringValue") then
                -- Supondo que cada skill tenha uma propriedade de cooldown (modificar conforme necessário)
                local cooldown = skill:FindFirstChild("Cooldown")
                if cooldown then
                    cooldown.Value = playerSettings.skillCooldown
                end
            end
        end
    end
end

-- Função para alterar configurações dinamicamente
local function updateSettings(setting, value)
    if playerSettings[setting] then
        playerSettings[setting] = value
        print("Configuração alterada: " .. setting .. " = " .. value)
        
        -- Aplicar as novas configurações imediatamente
        local player = game.Players.LocalPlayer
        applyCharacterSettings(player)
    else
        warn("Configuração não válida!")
    end
end

-- Função de exemplo para aplicar as configurações automaticamente ao jogador
local player = game.Players.LocalPlayer
applyCharacterSettings(player)

-- Testar as mudanças
-- Altere os valores dinamicamente, como:
updateSettings("movementSpeed", 150)  -- Aumentar a velocidade do personagem
updateSettings("jumpHeight", 200)     -- Aumentar a altura do pulo
updateSettings("gravity", 25)         -- Diminuir a gravidade
updateSettings("skillCooldown", 0.05) -- Diminuir o cooldown das skills
